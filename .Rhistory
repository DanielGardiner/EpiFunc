devtools::load_all(".")
usethis::use_package("ggplot2")
library(ggplot2)
library(scales)
usethis::use_package("ggplot2")
usethis::use_package("scales")
usethis::use_package("ggplot2")
install.packages("ggplot2")
usethis::use_package("ggplot2")
install.packages("EpiFunc")
data = data.frame(sex = sample(c("Male", "Female", "Unknown"), 200, replace = T),
age = sample(c(NA, 1:100), 200, replace = T))
data$age.grp = cut(as.numeric(data$age), breaks = c(0, 6, 16, 26, 46, 66, Inf),
include.lowest = T)
data
set.seed(1)
data = data.frame(sex = sample(c("Male", "Female", "Unknown"), 200, replace = T),
age = sample(c(NA, 1:100), 200, replace = T))
data$age.grp = cut(as.numeric(data$age), breaks = c(0, 6, 16, 26, 46, 66, Inf),
include.lowest = T)
data
set.seed(5)
data = data.frame(sex = sample(c("Male", "Female", "Unknown"), 200, replace = T),
age = sample(c(NA, 1:100), 200, replace = T))
data$age.grp = cut(as.numeric(data$age), breaks = c(0, 6, 16, 26, 46, 66, Inf),
include.lowest = T)
data
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex",
split.by = NULL,
lower.limit = -25, upper.limit = 30, col.pal = 4)
set.seed(5)
data = data.frame(sex = sample(c("Male", "Female", "Unknown"), 200, replace = T),
age = sample(c(NA, 1:100), 200, replace = T),
status = sample(c("Confirmed", "Probable"), 200, replace = T))
data$age.grp = cut(as.numeric(data$age), breaks = c(0, 6, 16, 26, 46, 66, Inf),
include.lowest = T)
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex",
split.by = NULL,
lower.limit = -25, upper.limit = 30, col.pal = 4)
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex",
split.by = NULL, col.pal = 4)
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex",
split.by = NULL)
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex", split.by = "status",
lower.limit = -50, upper.limit = 40, col.pal = 4)
age.sex.pyramid(data, age.grp.col = "age.grp", sex.col = "sex", split.by = "status")
version(testthat)
version
tile_plot = function(data, x.col, y.col, x.lab = "", y.lab = "", text = FALSE,
colour = "red", label.breaks = 0, rescale.by.row = FALSE,
keep.row.order = FALSE){
# convert to data frame
data = as.data.frame(data)
# assign x and y columns
data$y = data[, y.col]
data$x = data[, x.col]
# tabulate cases by laboratory by week
temp = as.data.frame.array(xtabs(~ y + x, data,
drop.unused.levels = FALSE))
# order data
if(keep.row.order){
NULL
} else {
temp = temp[order(apply(temp, 1, sum)), ]
}
# add y column
temp$y = row.names(temp)
temp.factor = rev(unique(temp$y))
# melt the dataset
temp = melt(temp, id.vars = "y")
temp$y = factor(temp$y,
levels = temp.factor)
temp$rescale = temp$value
if(rescale.by.row)  temp = temp %>% group_by(y) %>% mutate(rescale = rescale(value))
# plot temp2
p = ggplot(temp, aes(x = variable, y = y, size = rescale, fill = rescale))
p = p + geom_tile(colour = "white", size = 1)
if(text) p = p + geom_text(aes(label = value), vjust = 0.4, size = 4, colour = "black")
p = p + ylab(y.lab)
p = p + xlab(x.lab)
p = p + theme(title = element_text(size = 16, colour = "black", face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0, size = 10,
colour = "black"),
axis.text.y = element_text(hjust = 1, size = 9,
colour = "black"),
legend.text= element_text(hjust = 1, size = 16,
colour = "black", face="bold"),
axis.title = element_text(size=16, face="bold"),
strip.text.y = element_text(hjust = 1, size = 16,
colour = "black", face="bold"),
legend.position="bottom",
panel.border = element_rect(colour = "grey", fill = NA),
panel.background = element_blank())
p = p + scale_fill_continuous(low = "white", high = colour)
p = p + scale_x_discrete(breaks = levels(temp$variable)[c(T, rep(F, label.breaks))],
drop=FALSE)
p = p + theme(legend.position="none")
p
}
set.seed(3)
data = data.frame(geog = sample(c("Vienna", "Vienna", "Vienna", "Vienna", "Salzburg", "Innsbruck", "Graz", "Graz", "Linz", "Klagenfurt", "Villach"), 5000, replace = TRUE),
age.group = sample(c("0-19", "20-39", "40-59", "60+", "60+"), 5000, replace = TRUE),
week = factor(sample(paste0("week.", 1:30), 5000, replace = TRUE),
levels = paste0("week.", 1:30)))
# example plot (1)
tile_plot(data, x.col = "week", y.col = "geog",
x.lab = "Week", y.lab = "Geography", text = FALSE, colour = "red",
label.breaks = 0,
rescale.by.row = FALSE, keep.row.order = TRUE)
library(ggplot2)
library(ggplot2)
library(reshape2)
library(scales)
library(dplyr)
tile_plot(data, x.col = "week", y.col = "geog",
x.lab = "Week", y.lab = "Geography", text = FALSE, colour = "red",
label.breaks = 0,
rescale.by.row = FALSE, keep.row.order = TRUE)
set.seed(3)
data = data.frame(geog = sample(c("Vienna", "Vienna", "Vienna", "Vienna", "Salzburg", "Innsbruck", "Graz", "Graz", "Linz", "Klagenfurt", "Villach"), 5000, replace = TRUE),
age.group = sample(c("0-19", "20-39", "40-59", "60+", "60+"), 5000, replace = TRUE),
week = factor(sample(paste0("week.", 1:30), 5000, replace = TRUE),
levels = paste0("week.", 1:30)))
# example plot 1
tile_plot(data, x.col = "week", y.col = "geog",
x.lab = "Week", y.lab = "Geography", text = FALSE, colour = "red",
label.breaks = 0,
rescale.by.row = FALSE, keep.row.order = TRUE)
tile_plot(data, x.col = "week", y.col = "geog",
x.lab = "Week", y.lab = "Geography", text = FALSE, colour = "red",
label.breaks = 3,
rescale.by.row = FALSE, keep.row.order = TRUE)
tile_plot(data, x.col = "week", y.col = "geog",
x.lab = "Week", y.lab = "Geography", text = FALSE, colour = "red",
label.breaks = 0,
rescale.by.row = FALSE, keep.row.order = TRUE)
tile_plot(data, x.col = "week", y.col = "geog")
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, colour = "orange")
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, colour = "orange",
label.breaks = 2)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, label.breaks = 2)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, label.breaks = 2,
rescale.by.row = TRUE)
tile_plot(data, x.col = "week", y.col = "geog")
tile_plot(data, x.col = "week", y.col = "geog", keep.row.order = TRUE)
tile_plot(data, x.col = "week", y.col = "geog", keep.row.order = TRUE)
tile_plot(data, x.col = "week", y.col = "geog", keep.row.order = FALSE)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, label.breaks = 2)
tile_plot(data, x.col = "week", y.col = "geog", text = TRUE, label.breaks = 2,
rescale.by.row = TRUE)
?EpiFunc
?head
?EpiFunc::age_sex_pyramid
epicurve = function(x, date.col, time.period, fill.by=NULL, split.by=NULL, shade.by=NULL,
start.at=NULL, stop.at=NULL, xlab=NULL, ylab="Count",
fill.by.legend.title = NULL, shade.by.legend.title = NULL,
angle=45, col.pal=1, label.breaks =0, epi.squares = TRUE,
blank.background = FALSE, na.rm = FALSE) {
# handle arguments
if(!is.null(fill.by) && is.numeric(fill.by)) fill.by = names(x)[fill.by]
if(!is.null(split.by) && is.numeric(split.by)) split.by = names(x)[split.by]
if(!is.null(shade.by) && is.numeric(shade.by)) shade.by = names(x)[shade.by]
if(!is.null(col.pal) && col.pal==0) col.pal = NULL # 0 will be the default palette
x = as.data.frame(x)
if(!(col.pal == "phe" | (col.pal >= 0 & col.pal <= 8))) {
col.pal = "phe"
warning("col.pal must either be an integer from 1 to 8 or 'phe',
setting col.pal='phe'")
}
if(!(time.period %in% c("day", "year", "month", "quarter", "year.month", "year.quarter", "iso.year", "iso.week", "iso.year.week", "use.date.col.as.is"))){
stop("time.period must be either: day, year, quarter, month, year.quarter, year.month, iso.year, iso.week, iso.year.week, use.date.col.as.is")
}
##############################################################################
# Define factor column (date.col.temp) to be used along the x-axis
#
# if time.period argument is use.date.col.as.is then use date.col along the x-axis
# otherwise convert the date provided in date.col to the time period specified
# in the time.period argument
if(time.period == "use.date.col.as.is"){
x$date.col.temp = x[, date.col]
} else {
# load get.dates function
get.dates = function(x){
if(class(x) == "Date"){
NULL
} else {
stop("x is not a date")
}
df = data.frame(day = as.character(x),
year = format(x, "%Y"),
month = format(x, "%m"))
df$year.month = paste0(df$year, df$month)
df$iso.year = sapply(strsplit(ISOweek(x), "-W"), function(x) x[1])
df$iso.week = sapply(strsplit(ISOweek(x), "-W"), function(x) x[2])
df$iso.year.week = gsub("-W", "", ISOweek(x))
df$quarter = NA
df$quarter[!is.na(df$day)] = sprintf("%02d", ceiling(as.numeric(as.character(df$month[!is.na(df$day)]))/3))
df$year.quarter = paste0(df$year, df$quarter)
df[is.na(df$day), ] = NA
df
}
# append the get.dates data.frame to the data.frame provided
x = data.frame(x, get.dates(x[, date.col]))
# create a new factor column for the x-axis (levels of the factor contain
# dates ranging from start.at to stop.at)
start.at = as.Date(start.at)
stop.at = as.Date(stop.at)
all.dates = get.dates(seq(start.at, stop.at, 1))
all.dates = unique(all.dates[, time.period])
x$date.col.temp = factor(x[, time.period],
levels = all.dates)
# recode dates that fall outside of start.at/stop.at to NA
x[!(as.character(x[, date.col]) %in%
as.character(get.dates(seq(start.at, stop.at, 1))$day)), "date.col.temp"] = NA
## REMOVE MISSING DATES ##
cat(paste(sum(is.na(x$date.col.temp)), "rows have missing dates OR dates outside of the start/stop period"))
if(na.rm) x = x[!is.na(x$date.col.temp), ]
# order the levels of the date.col.temp column
x$date.col.temp = factor(x$date.col.temp,
levels = sort(levels(x$date.col.temp)))
}
# we have now defined the factor column (date.col.temp) to be used along the x-axis
##############################################################################
# order data for plotting
if(!is.null(fill.by) & !is.null(shade.by)){
x = x[order(x[, fill.by], x[, shade.by]), ]
} else if(!is.null(fill.by)){
x = x[order(x[, fill.by]), ]
} else if(!is.null(shade.by)){
x = x[order(x[, shade.by]), ]
} else{
NULL
}
# create blocks column (this is to allow for epi squares to be added)
x$blocks = 1:nrow(x)
##############################################################################
# generate plot
# generate main body of plot
p = ggplot(x)
# add geom_bar layer with either epi-squares  or no epi-squares
if(epi.squares){
p = p + geom_bar(aes_string(x="date.col.temp", fill=fill.by, alpha=shade.by, group = "blocks"),
colour = "black")
} else {
p = p + geom_bar(aes_string(x="date.col.temp", fill=fill.by, alpha=shade.by),
colour = "black")
}
# add labs
p = p + labs(x = xlab, y = ylab)
# add x-axis label breaks
p = p + scale_x_discrete(breaks = levels(x$date.col.temp)[c(T, rep(F, label.breaks))],
drop=FALSE)
# format y-axis breaks
p = p + scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1)*1.1)))),
expand = c(0,0))
# add a solid line running across the bottom of the figure
p = p + geom_hline(aes(yintercept = 0))
# add theme aesthetics
p = p + theme(title = element_text(size = 11, colour = "black", face="bold"),
axis.text.x = element_text(angle = angle, vjust = .5, size = 10,
colour = "black"),
axis.text.y = element_text(hjust = 1, size = 9,
colour = "black"),
legend.text= element_text(hjust = 1, size = 11,
colour = "black", face="bold"),
axis.title = element_text(size=16, face="bold"),
strip.text.y = element_text(hjust = 1, size = 16,
colour = "black", face="bold"),
legend.position="right")
# remove background if specified in blank.background argument
if(blank.background){
p = p + theme(panel.background = element_blank())
} else {
NULL
}
# add labels for the fill.by and shade.by legends
p = p + labs(fill = fill.by.legend.title,
alpha = shade.by.legend.title)
# specify a range for the shady.by level
p = p + scale_alpha_discrete(range = c(0.35, 1))
# facet using split.by
if(!is.null(split.by)) p = p + facet_grid(paste(split.by, ".", sep = "~"),
drop = FALSE)
# add the phe colour palette or a generic colour palette
if(col.pal == "phe"){
phe.cols = c("#822433", "#00B092", "#002776", "#EAAB00", "#8CB8C6",
"#E9994A",  "#00A551", "#A4AEB5", "#00549F", "#DAD7CB")
p = p + scale_fill_manual(values = phe.cols, drop = FALSE)
} else if(!is.null(col.pal)){
p = p + scale_fill_brewer(type = "qual",
palette = col.pal, drop = FALSE)
} else {
NULL
}
# return the final output
p
}
set.seed(2)
data = data.frame(dates = sample(seq(as.Date('2014-01-01'), as.Date('2016-04-01'), by="day"), 200, replace = TRUE),
sex = c("Male", "Female"),
conf = sample(c("Confirmed", "Probable", "possible"), 200, replace = TRUE),
status = sample(c("Student", "Staff"), 200, replace = TRUE))
data$dates.year.month = factor(format(data$dates, "%Y_%m"),
levels = unique(format(seq(min(data$dates), max(data$dates), 1), "%Y_%m")))
# use function
epicurve(data, date.col = "dates", time.period = "iso.year.week",
fill.by="sex", split.by=NULL, shade.by=NULL,
start.at = "2014-08-01", stop.at = "2015-06-28",
xlab="Year week", ylab="Count",
fill.by.legend.title = "Sex", shade.by.legend.title = NULL, angle=90,
col.pal="phe", label.breaks = 1, epi.squares = TRUE, blank.background = TRUE,
na.rm = TRUE)
library(ggplot2)
library(ggplot2)
library(ISOweek)
library(scales)
epicurve(data, date.col = "dates", time.period = "iso.year.week",
fill.by="sex", split.by=NULL, shade.by=NULL,
start.at = "2014-08-01", stop.at = "2015-06-28",
xlab="Year week", ylab="Count",
fill.by.legend.title = "Sex", shade.by.legend.title = NULL, angle=90,
col.pal="phe", label.breaks = 1, epi.squares = TRUE, blank.background = TRUE,
na.rm = TRUE)
epicurve(data, date.col = "dates", time.period = "iso.year.week",
fill.by="sex", split.by=NULL, shade.by=NULL,
start.at = "2014-08-01", stop.at = "2015-06-28",
xlab="Year week", ylab="Count",
fill.by.legend.title = "Sex", shade.by.legend.title = NULL, angle=90,
col.pal="phe", label.breaks = 0, epi.squares = TRUE, blank.background = TRUE,
na.rm = TRUE)
epicurve(data, date.col = "dates", time.period = "iso.year.week",
fill.by="sex", split.by=NULL, shade.by=NULL,
start.at = "2014-08-01", stop.at = "2015-06-28",
xlab="Year week", ylab="Count",
fill.by.legend.title = "Sex", shade.by.legend.title = NULL, angle=90,
col.pal="phe", label.breaks = 0, epi.squares = TRUE, blank.background = TRUE,
na.rm = FALSE)
epicurve(data, date.col = "dates", time.period = "iso.year.week",
fill.by="sex", split.by=NULL, shade.by=NULL,
start.at = "2014-08-01", stop.at = "2015-06-28",
xlab="Year week", ylab="Count",
fill.by.legend.title = "Sex", shade.by.legend.title = NULL, angle=90,
col.pal="phe", label.breaks = 0, epi.squares = TRUE, blank.background = TRUE,
na.rm = TRUE)
surveillance::isoWeekYear(as.Date("2017-12-31"))
surveillance::isoWeekYear(as.Date("2018-12-31"))
vec = c("A", "B", "C", "D")
vec[grep("A", vec)]
vec[grep(c("A", "B"), vec)]
find = c("A", "B")
find
vec[grep("A | B", vec)]
find = c("A", "B")
find
library(tidyverse)
?tbl_df()
?df_tbl
library(tidyverse)
vec = c("A", "B", "C", "D")
find = c("A", "B")
for(i in find){
grep(i, vec) %>% print()
}
grep(i, vec)
vec
x = NULL
for(i in find){
x = c(x, grep(i, vec) )
}
x
library(tidyverse)
vec = c("A", "B", "C", "D", "B", "F")
find = c("A", "B")
x = NULL
for(i in find){
x = c(x, grep(i, vec) )
}
x
vec[x]
library(stringr)
str_detect(string = vec, pattern = "B")
string = vec
pattern = "B"
x = NULL
i
str_detect(i, string)
str_detect("A", string)
str_detect("A", string) + str_detect("B", string)
str_detect("A", string) && str_detect("B", string)
str_detect("A", string)
str_detect("A", string) + str_detect("B", string)
str_detect("A", string)
str_detect("A", string)
str_detect("A", string) + str_detect("B", string)
str_detect("A", string) + str_detect("B", string) >= 1
x = NULL
for(i in find){
y = str_detect(i, string)
x = x + y
}
x
x = NULL
y = str_detect(i, string)
y
x
x + y
x = FALSE
x = FALSE
for(i in find){
y = str_detect(i, string)
x = x + y
}
x
str_detect_or = function(string, pattern){
x = FALSE
for(i in find){
y = str_detect(i, string)
x = x + y
}
x > = 1
}
str_detect_or = function(string, pattern){
x = FALSE
for(i in find){
y = str_detect(i, string)
x = x + y
}
x >= 1
}
str_detect_or = function(string, pattern){
x = FALSE
for(i in find){
y = str_detect(i, string)
x = x + y
}
x >= 1
}
str_detect_or
str_detect_or = function(string, pattern.vector){
x = FALSE
for(i in find){
y = str_detect(i, string)
x = x + y
}
x >= 1
}
str_detect_or(vec, c("A", "B"))
vec[str_detect_or(vec, c("A", "B"))]
# ask ashley about building df rowwise - for lookup tables?
library(tidyverse)
library(stringr)
str_detect_or = function(string, pattern.vector){
x = FALSE
for(i in pattern.vector){
y = str_detect(i, string)
x = x + y
}
x >= 1
}
vec[str_detect_or(vec, c("A", "B"))]
vec[str_detect_or(vec, c("A", "B", "DE"))]
vec
vec[str_detect_or(vec, c("A", "B", "DEF"))]
vec[str_detect_or(vec, c("A", "B", "[DEF]"))]
grep("DEF", vec)
